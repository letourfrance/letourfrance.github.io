{"meta":{"title":"LetourTheFrance","subtitle":"passage","description":"Android��java","author":"ouzw","url":"http://yoursite.com/child"},"pages":[{"title":"","date":"2017-05-27T13:18:04.688Z","updated":"2017-05-27T13:18:04.688Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/child/categories/index.html","excerpt":"","text":"title: categories date: 2017-05-27 21:17:04"},{"title":"","date":"2017-05-27T13:16:18.220Z","updated":"2017-05-27T13:16:18.220Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/child/tags/index.html","excerpt":"","text":"title: tags date: 2017-05-27 21:12:47"}],"posts":[{"title":"Android学习笔记之面试相关","slug":"Android学习笔记之面试相关","date":"2017-06-06T15:11:56.000Z","updated":"2017-06-06T15:16:11.668Z","comments":true,"path":"2017/06/06/Android学习笔记之面试相关/","link":"","permalink":"http://yoursite.com/child/2017/06/06/Android学习笔记之面试相关/","excerpt":"","text":"Android学习笔记之面试过程所需要掌握的技术1. 基本知识点比如四大组件如何使用、如何创建Service、如何进行布局等。这类知识是需要熟练掌握的，并且也没什么难度。 2. 稍微深入的知识点比如AIDL、Binder、多进程、View的绘制流程、事件分发、消息队列等。这类知识对于高级开发者来说也是必须掌握的，然而相信很多候选者在面试 之前并不能对这些问题了如指掌。这些问题基本都是面试过程中很常见的问题，也是高级岗位所必须掌握的问题，不搞定这些问题无法达到百度的高级工程师的标 准，因此也不可能通过面试。 3. 基本知识点的细节比如Activity的启动模式和标记位、Service同时处于start和bind状态时的停止问题、AsyncTask的同步异步问题以及使用时的 限制等，这种问题还有很多。这类知识点，大家在开发过程中可以并不会去注意，这会导致一个问题，那就是开发应用没问题，但是在面试时面试官只要稍微问下细 节或者特殊情况，就hold不住了。 这类问题也是高级开发者所需要掌握的，有些面试官喜欢问一些看似刁钻的问题，但是候选者如果回答不了也是不好的。 4. 系统核心机制比如主线程的消息循环、主线程如何和AMS如何跨进程交互、SystemServer进程中的各种Service的工作方式、AsyncTask的工作原 理等。这类知识对于高级开发者也是建议掌握的，因为它们可以让开发者理解Android的运行体系。 这类问题并不是所有的Android面试都会涉及到，但是技术含量高的大公司有可能涉及此类问题。 5. 琐碎的知识点此类知识点我把它们定义为一些重要但是没有什么技术难度的问题，比如如何打开一个网页、如何打电话、如何发短信、如何定位、多点触控等，这类问题往往不好记忆，但是需要的时候去查一下就能立马搞定。这类问题基本上不会出现在面试过程中。","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/child/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/child/tags/Android/"},{"name":"面试","slug":"面试","permalink":"http://yoursite.com/child/tags/面试/"}]},{"title":"Android笔记之控件","slug":"Android笔记","date":"2017-05-31T13:20:14.000Z","updated":"2017-06-05T15:31:53.456Z","comments":true,"path":"2017/05/31/Android笔记/","link":"","permalink":"http://yoursite.com/child/2017/05/31/Android笔记/","excerpt":"","text":"Android学习笔记之控件1.ViewGroupViewGroup父控件，管理多个View控件。通过View形成控件树。 上层控件负责下层控件的测量和绘制，并统一调度交互事件。 2.Viewview的测量，告诉系统画一个多大的View，在onMeasure()中进行。 3.MeasureSpec帮助测量View，32位测量值，高2位为测量模式，底30位为测量大小。用位运行模式为了提高效率。 4.测量模式 1.EXACTLY:精确模式，指定控件具体大小，系统默认也是这种模式。 2.AT_MOST：最大值模式，控件尺寸不超过某个值。 3.UNSPECIFIED：想多大就多大，通常情况下，绘制自定义View时用。 protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { // TODO Auto-generated method stub mMeasureHeigth = MeasureSpec.getSize(heightMeasureSpec); mMeasureWidth = MeasureSpec.getSize(widthMeasureSpec); setMeasuredDimension(mMeasureWidth, mMeasureHeigth); initView(); } 5.View的绘制onDraw()方法，通过Canvas对象进行绘图。 6.ViewGroup的测量当为wrap_content时，对子View进行历遍获取所以子View大小， 决定自己大小。其他模式则通过具体值。 7.ViewGroup的绘制通常不需要，但会调用dispatchDraw()方法来绘制子View。 8.自定义View1.对现有控件进行扩展2.通过组合来实现新控件3.重写View来实现全新控件","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/child/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/child/tags/Android/"}]}]}