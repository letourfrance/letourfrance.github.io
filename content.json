{"meta":{"title":"LetourTheFrance","subtitle":"passage","description":"Android��java","author":"ouzw","url":"http://yoursite.com/child"},"pages":[{"title":"","date":"2017-05-27T13:18:04.688Z","updated":"2017-05-27T13:18:04.688Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/child/categories/index.html","excerpt":"","text":"title: categories date: 2017-05-27 21:17:04"},{"title":"","date":"2017-05-27T13:16:18.220Z","updated":"2017-05-27T13:16:18.220Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/child/tags/index.html","excerpt":"","text":"title: tags date: 2017-05-27 21:12:47"}],"posts":[{"title":"[转]Android学习笔记之路线","slug":"转-Android学习笔记之路线","date":"2017-06-06T15:23:55.000Z","updated":"2017-06-06T15:30:46.365Z","comments":true,"path":"2017/06/06/转-Android学习笔记之路线/","link":"","permalink":"http://yoursite.com/child/2017/06/06/转-Android学习笔记之路线/","excerpt":"","text":"Android学习笔记成长路线1.初级工程师Android入门的时候，需要有一本入门书，好好学习书中的内容，同时花一年时间把Android官方文档中的training和guide看一遍，同 时通过写博客和记笔记的方式来做总结，建议让自己的每篇博客都有价值些。通过一年时间的学习，相信每个人都可以达到中级工程师的水平。《第一行代码 Android》、《疯狂Android》 2.中级工程师 AIDL：熟悉AIDL，理解其工作原理，懂transact和onTransact的区别； Binder：从Java层大概理解Binder的工作原理，懂Parcel对象的使用； 多进程：熟练掌握多进程的运行机制，懂Messenger、Socket等； 事件分发：弹性滑动、滑动冲突等； 玩转View：View的绘制原理、各种自定义View； 动画系列：熟悉View动画和属性动画的不同点，懂属性动画的工作原理； 懂性能优化、熟悉mat等工具 懂点常见的设计模式阅读进阶书籍，阅读Android源码，阅读官方文档并尝试自己写相关的技术文章，需要有一定技术深度和自我思考。在这个阶段的学习过程中，有2个点是比较困扰大家的，一个是阅读源码，另一个是自定义View以及滑动冲突。 如何阅读源码呢？这是个头疼的问题，但是源码必须要读。阅读源码的时候不要深入代码细节不可自拔，要关注代码的流程并尽量挖掘出对应用层开发有用的 结论。另外仔细阅读源码中对一个类或者方法的注释，在看不懂源码时，源码中的注释可以帮你更好地了解源码中的工作原理，这个过程虽然艰苦，但是别无他法。 如何玩转自定义View呢？我的建议是不要通过学习自定义view而学习自定义view。为什么这么说呢？因为自定义view的种类太多了，各式各样的绚丽的自定义效果，如何学的玩呢！我们要透过现象看本质，更多地去关注自定义view所需的知识点，这里做如下总结： 搞懂view的滑动原理 搞懂如何实现弹性滑动 搞懂view的滑动冲突 搞懂view的measure、layout和draw 然后再学习几个已有的自定义view的例子 最后就可以搞定自定义view了，所谓万变不离其宗 大概再需要1-2年时间，即可达到高级工程师的技术水平。我个人认为通过《Android开发艺术探索》和《Android群英传》可以缩短这个过 程为0.5-1年。注意，达到高级工程师的技术水平不代表就可以立刻成为高级工程师（受机遇、是否跳槽的影响），但是技术达到了，成为高级工程师只是很简 单的事。 技术要求: 稍微深入的知识点AIDL、Messenger、Binder、多进程、动画、滑动冲突、自定义View、消息队列等 书籍推荐《Android开发艺术探索》、《Android群英传》3.高级工程师 了解系统核心机制： 了解SystemServer的启动过程 了解主线程的消息循环模型 了解AMS和PMS的工作原理 能够回答问题”一个应用存在多少个Window？“ 了解四大组件的大概工作流程 … 基本知识点的细节 Activity的启动模式以及异常情况下不同Activity的表现 Service的onBind和onReBind的关联 onServiceDisconnected(ComponentName className)和binderDied()的区别 AsyncTask在不同版本上的表现细节 线程池的细节和参数配置 … - 熟悉设计模式，有架构意识4.学习方法 这个时候已经没有太具体的学习方法了，无非就是看书、看源码和做项目，平时多种总结，尽量将知识融会贯通从而形成一种体系化的感觉。同时这个阶段对 架构是有一定要求的，架构是抽象的，但是设计模式是具体的，所以一定要加强下设计模式的学习。关于设计模式的学习，最近一本新书推荐给大家 《Android 源码设计模式解析与实战》，既可以学习设计模式，又可能体会到Android源码中的设计思想，我最近也在阅读此书。 技术要求： 稍微深入的知识点 系统核心机制 基本知识点的细节 设计模式和架构 书籍推荐《Android开发艺术探索》、《Android 源码设计模式解析与实战》、《Android内核剖析》","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/child/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/child/tags/Android/"},{"name":"经验","slug":"经验","permalink":"http://yoursite.com/child/tags/经验/"}]},{"title":"【转】Android学习笔记之面试相关","slug":"Android学习笔记之面试相关","date":"2017-06-06T15:11:56.000Z","updated":"2017-06-06T15:19:31.948Z","comments":true,"path":"2017/06/06/Android学习笔记之面试相关/","link":"","permalink":"http://yoursite.com/child/2017/06/06/Android学习笔记之面试相关/","excerpt":"","text":"Android学习笔记之面试过程所需要掌握的技术1. 基本知识点比如四大组件如何使用、如何创建Service、如何进行布局等。这类知识是需要熟练掌握的，并且也没什么难度。 2. 稍微深入的知识点比如AIDL、Binder、多进程、View的绘制流程、事件分发、消息队列等。这类知识对于高级开发者来说也是必须掌握的，然而相信很多候选者在面试 之前并不能对这些问题了如指掌。这些问题基本都是面试过程中很常见的问题，也是高级岗位所必须掌握的问题，不搞定这些问题无法达到百度的高级工程师的标 准，因此也不可能通过面试。 3. 基本知识点的细节比如Activity的启动模式和标记位、Service同时处于start和bind状态时的停止问题、AsyncTask的同步异步问题以及使用时的 限制等，这种问题还有很多。这类知识点，大家在开发过程中可以并不会去注意，这会导致一个问题，那就是开发应用没问题，但是在面试时面试官只要稍微问下细 节或者特殊情况，就hold不住了。 这类问题也是高级开发者所需要掌握的，有些面试官喜欢问一些看似刁钻的问题，但是候选者如果回答不了也是不好的。 4. 系统核心机制比如主线程的消息循环、主线程如何和AMS如何跨进程交互、SystemServer进程中的各种Service的工作方式、AsyncTask的工作原 理等。这类知识对于高级开发者也是建议掌握的，因为它们可以让开发者理解Android的运行体系。 这类问题并不是所有的Android面试都会涉及到，但是技术含量高的大公司有可能涉及此类问题。 5. 琐碎的知识点此类知识点我把它们定义为一些重要但是没有什么技术难度的问题，比如如何打开一个网页、如何打电话、如何发短信、如何定位、多点触控等，这类问题往往不好记忆，但是需要的时候去查一下就能立马搞定。这类问题基本上不会出现在面试过程中。","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/child/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/child/tags/Android/"},{"name":"面试","slug":"面试","permalink":"http://yoursite.com/child/tags/面试/"}]},{"title":"Android笔记之控件","slug":"Android笔记","date":"2017-05-31T13:20:14.000Z","updated":"2017-06-05T15:31:53.456Z","comments":true,"path":"2017/05/31/Android笔记/","link":"","permalink":"http://yoursite.com/child/2017/05/31/Android笔记/","excerpt":"","text":"Android学习笔记之控件1.ViewGroupViewGroup父控件，管理多个View控件。通过View形成控件树。 上层控件负责下层控件的测量和绘制，并统一调度交互事件。 2.Viewview的测量，告诉系统画一个多大的View，在onMeasure()中进行。 3.MeasureSpec帮助测量View，32位测量值，高2位为测量模式，底30位为测量大小。用位运行模式为了提高效率。 4.测量模式 1.EXACTLY:精确模式，指定控件具体大小，系统默认也是这种模式。 2.AT_MOST：最大值模式，控件尺寸不超过某个值。 3.UNSPECIFIED：想多大就多大，通常情况下，绘制自定义View时用。 protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { // TODO Auto-generated method stub mMeasureHeigth = MeasureSpec.getSize(heightMeasureSpec); mMeasureWidth = MeasureSpec.getSize(widthMeasureSpec); setMeasuredDimension(mMeasureWidth, mMeasureHeigth); initView(); } 5.View的绘制onDraw()方法，通过Canvas对象进行绘图。 6.ViewGroup的测量当为wrap_content时，对子View进行历遍获取所以子View大小， 决定自己大小。其他模式则通过具体值。 7.ViewGroup的绘制通常不需要，但会调用dispatchDraw()方法来绘制子View。 8.自定义View1.对现有控件进行扩展2.通过组合来实现新控件3.重写View来实现全新控件","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/child/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/child/tags/Android/"}]}]}